# def revers_str(string):
#     if type(string) == str:
#         L = []
#         L[:] = string
#         string = ''.join(L[::-1])
#         return string.upper()
#
#
# print(revers_str("HGa;sld;lkl;"))

# while True:
#     try:
#         number = int(input('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ: '))  # –ó–∞–ø—Ä–æ—Å —á–∏—Å–ª–∞
#         if number % 2 == 0:       # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —á—ë—Ç–Ω–æ—Å—Ç—å
#             print("–ß—ë—Ç–Ω–æ–µ")
#         else:
#             print("–ù–µ—á—ë—Ç–Ω–æ–µ")
#         break
#     except ValueError:      # –õ–æ–≤–∏–º –æ—à–∏–±–∫—É
#         print("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!")

# try:
#     num1 = float(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 1: "))
#     num2 = float(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 2: "))
#     num3 = float(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ 3: "))
#
#     # –¢–≤–æ–π –∫–æ–¥ –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–∏–Ω–∏–º—É–º–∞ –∑–¥–µ—Å—å
#     min_num = min(num1, num2, num3)
#
#     print("–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ:", min_num)
# except ValueError:
#     print("–û—à–∏–±–∫–∞: –Ω—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–æ!")


"""üîπ –ó–∞–¥–∞—á–∞ 1: "–°—É–º–º–∞ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞"
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é sum_list(numbers), –∫–æ—Ç–æ—Ä–∞—è:

–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª numbers.

–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—É–º–º—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤.
sum_list([1, 2, 3])       ‚Üí 6
sum_list([-5, 10, 0.5])  ‚Üí 5.5
üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:

–ò—Å–ø–æ–ª—å–∑—É–π —Ü–∏–∫–ª for –∏–ª–∏ –≤—Å—Ç—Ä–æ–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é sum() (–Ω–æ –ø–æ–ø—Ä–æ–±—É–π –æ–±–∞ —Å–ø–æ—Å–æ–±–∞!).
"""

# def sum_list(numbers):
#     return sum(numbers[:])
#
# def sum_list2(numbers):
#     i = 0
#     sum_num = 0
#     for i in range(len(numbers)):
#         sum_num += numbers[i]
#     return sum_num
#
# print(sum_list2([1,2,3,-9]))
"""
üîπ –ó–∞–¥–∞—á–∞ 2: "–ü–æ–∏—Å–∫ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤"
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é find_unique(items), –∫–æ—Ç–æ—Ä–∞—è:
–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ items (–º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥—É–±–ª–∏–∫–∞—Ç—ã).
–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ —Ç–æ–ª—å–∫–æ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏ (–±–µ–∑ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏–π).
–ü—Ä–∏–º–µ—Ä:
find_unique([1, 2, 2, 3, 4, 4, 4]) ‚Üí [1, 2, 3, 4]  
find_unique(["a", "b", "a", "a"])   ‚Üí ["a", "b"]  
üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:

–ü—Ä–æ–≤–µ—Ä—è–π, –µ—Å—Ç—å –ª–∏ —ç–ª–µ–º–µ–Ω—Ç –≤ –Ω–æ–≤–æ–º —Å–ø–∏—Å–∫–µ –ø–µ—Ä–µ–¥ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º.

–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π set() (–Ω–æ —Ç–æ–≥–¥–∞ –ø–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å—Å—è).
"""
# def find_unique(L):
#     L2 = []
#     for el in L:
#         if el not in L2:
#             L2.append(el)
#     return L2
#
# def find_unique1(L):
#     return list(set(L))
#
# L = [1, 2, 2, 3, 4, 4, 4]
# print(find_unique(L))

"""
üîπ –ó–∞–¥–∞—á–∞ 1: "–°–∫–ª–µ–∏–≤–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å"
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é join_with_delimiter(words, delimiter), –∫–æ—Ç–æ—Ä–∞—è:

–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫ words –∏ —Å—Ç—Ä–æ–∫—É-—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å delimiter.

–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –≤—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —Å–ø–∏—Å–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω—ã —á–µ—Ä–µ–∑ —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å.

–ü—Ä–∏–º–µ—Ä:
join_with_delimiter(["–Ø", "—É—á—É", "Python"], "+++")  ‚Üí "–Ø+++—É—á—É+++Python"
join_with_delimiter(["101", "202", "303"], "-")    ‚Üí "101-202-303"
üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞: –í Python –µ—Å—Ç—å –º–µ—Ç–æ–¥ .join(), –Ω–æ –ø–æ–ø—Ä–æ–±—É–π —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å —ç—Ç–æ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ —Ü–∏–∫–ª!
"""

# def join_with_delimiter(s, r):
#     L = s[0]
#     for i in range(1, len(s)):
#         L = L + r + s[i]
#     return L
#
#
# print(join_with_delimiter(["101", "202", "303"], "-"))

"""
üîπ –ó–∞–¥–∞—á–∞ 2: "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–Ω–Ω–∞–≥—Ä–∞–º–º—É"
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é is_anagram(word1, word2), –∫–æ—Ç–æ—Ä–∞—è:

–ü—Ä–∏–Ω–∏–º–∞–µ—Ç –¥–≤–µ —Å—Ç—Ä–æ–∫–∏.

–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è—é—Ç—Å—è –ª–∏ –æ–Ω–∏ –∞–Ω–Ω–∞–≥—Ä–∞–º–º–∞–º–∏ (—Å–æ—Å—Ç–æ—è—Ç –∏–∑ –æ–¥–Ω–∏—Ö –∏ —Ç–µ—Ö –∂–µ –±—É–∫–≤ –≤ —Ä–∞–∑–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ).

–ò–≥–Ω–æ—Ä–∏—Ä—É–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä –∏ –ø—Ä–æ–±–µ–ª—ã.

–ü—Ä–∏–º–µ—Ä:
is_anagram("–õ—É–Ω—å", "–Ω—É–ª—å")   ‚Üí True  
is_anagram("–ö–æ—Ç", "—Ç–æ–∫")     ‚Üí True  
is_anagram("–°–æ–Ω", "–Ω–æ—Å–æ–∫")   ‚Üí False  
üí° –ü–æ–¥—Å–∫–∞–∑–∫–∞:

–ü—Ä–∏–≤–µ–¥–∏ –æ–±–µ —Å—Ç—Ä–æ–∫–∏ –∫ –æ–¥–Ω–æ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, –Ω–∏–∂–Ω–µ–º—É).

–£–¥–∞–ª–∏ –ø—Ä–æ–±–µ–ª—ã (–µ—Å–ª–∏ –µ—Å—Ç—å).

–û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π –±—É–∫–≤—ã –≤ –æ–±–æ–∏—Ö —Å–ª–æ–≤–∞—Ö –∏ —Å—Ä–∞–≤–Ω–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã.
"""

# def is_anagram(S1, S2):
#     S1 = ''.join(sorted(S1.lower()))
#     S2 = ''.join(sorted(S2.lower()))
#     return S1 == S2
#
#
# print(is_anagram('—Ç–æ–∫', '–∫–æ—Ç'))
"""
üîπ –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —Å—Ç—Ä–æ–∫–∏
1. –£–¥–≤–æ–µ–Ω–∏–µ —Å–∏–º–≤–æ–ª–æ–≤
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É, –≥–¥–µ –∫–∞–∂–¥—ã–π —Å–∏–º–≤–æ–ª –ø–æ–≤—Ç–æ—Ä—è–µ—Ç—Å—è –¥–≤–∞–∂–¥—ã.
–ü—Ä–∏–º–µ—Ä:
double_chars("abc") ‚Üí "aabbcc"
double_chars("–ü—Ä–∏–≤–µ—Ç") ‚Üí "–ü–ü—Ä—Ä–∏–∏–≤–≤–µ–µ—Ç—Ç"
"""
# def double_chars(s):
#     return ''.join(list(ch * 2 for ch in s))
#
# print(double_chars("–•–∞–∫–∞—Å"))
"""
2. –£–¥–∞–ª–µ–Ω–∏–µ –≥–ª–∞—Å–Ω—ã—Ö
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —É–¥–∞–ª—è–µ—Ç –≤—Å–µ –≥–ª–∞—Å–Ω—ã–µ –±—É–∫–≤—ã (–∞, –µ, —ë, –∏, –æ, —É, —ã, —ç, —é, —è) –∏–∑ —Å—Ç—Ä–æ–∫–∏.
–ü—Ä–∏–º–µ—Ä:
remove_vowels("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ") ‚Üí "–ü—Ä–≥—Ä–º–º–≤–Ω"  
"""
# def remove_vowels(s):
#     return ''.join(list(ch for ch in s if ch  not in '–∞–µ—ë–∏–æ—É—ã—ç—é—è'))
#
# print(remove_vowels("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"))

"""
3. –ó–∞–º–µ–Ω–∞ —Ü–∏—Ñ—Ä –Ω–∞ —Å–ª–æ–≤–∞
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–º–µ–Ω—è–µ—Ç —Ü–∏—Ñ—Ä—ã –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ –∏—Ö –Ω–∞–∑–≤–∞–Ω–∏—è (0 ‚Üí "–Ω–æ–ª—å", 1 ‚Üí "–æ–¥–∏–Ω" –∏ —Ç.–¥.).
–ü—Ä–∏–º–µ—Ä:
replace_numbers("–ú–Ω–µ 5 –ª–µ—Ç") ‚Üí "–ú–Ω–µ –ø—è—Ç—å –ª–µ—Ç"  
"""
# def replace_numbers(s):
#     L1 = s.split()
#     L2 = []
#     dict_int = {'1': '–æ–¥–∏–Ω', '2': '–¥–≤–∞', '3': '—Ç—Ä–∏'}
#     # L = list(word for word in L if word not in "1234567890" else dict_int[word])
#     for word in L1:
#         if word in dict_int:
#             L2.append(dict_int[word])
#         else:
#             L2.append(word)
#     return ' '.join(L2)
#
# print(replace_numbers("–ú–Ω–µ 2 –≥–æ–¥–∞"))

"""
4. –ü–µ—Ä–≤–∞—è –∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –±—É–∫–≤–∞
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–≤—É—é –∏ –ø–æ—Å–ª–µ–¥–Ω—é—é –±—É–∫–≤—É —Å—Ç—Ä–æ–∫–∏. –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø—É—Å—Ç–∞—è, –≤–µ—Ä–Ω–∏ "".
–ü—Ä–∏–º–µ—Ä:
first_last("Python") ‚Üí "Pn"  
first_last("–ê") ‚Üí "–ê–ê"  
"""
# def first_last(s):
#     return s[0]+s[-1] if len(s) else ""
#
# print(first_last("sdfsd"))
"""    
5. –°–ª–æ–≤–∞ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø–µ—Ä–µ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç –ø–æ—Ä—è–¥–æ–∫ —Å–ª–æ–≤ –≤ —Å—Ç—Ä–æ–∫–µ (—Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å ‚Äî –ø—Ä–æ–±–µ–ª).
–ü—Ä–∏–º–µ—Ä:
reverse_words("–Ø —É—á—É Python") ‚Üí "Python —É—á—É –Ø"  
"""
# def reverse_words(s):
#     return ' '.join(s.split()[::-1])
#
# print(reverse_words("sdffsdfdssdf"))
"""
üîπ –ó–∞–¥–∞—á–∞: "–®–∏—Ñ—Ä –¶–µ–∑–∞—Ä—è" (–ø—Ä–æ—Å—Ç–æ–π —Å–¥–≤–∏–≥ –±—É–∫–≤)
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é caesar_cipher(text, shift), –∫–æ—Ç–æ—Ä–∞—è:

–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É text –∏ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ shift (—Å–¥–≤–∏–≥).

–ó–∞–º–µ–Ω—è–µ—Ç –∫–∞–∂–¥—É—é –±—É–∫–≤—É –≤ text –Ω–∞ –±—É–∫–≤—É, —Å—Ç–æ—è—â—É—é –≤ –∞–ª—Ñ–∞–≤–∏—Ç–µ –Ω–∞ shift –ø–æ–∑–∏—Ü–∏–π –¥–∞–ª—å—à–µ.

–ù–µ –∏–∑–º–µ–Ω—è–µ—Ç —Å–∏–º–≤–æ–ª—ã, –Ω–µ —è–≤–ª—è—é—â–∏–µ—Å—è –±—É–∫–≤–∞–º–∏ (–ø—Ä–æ–±–µ–ª—ã, —Ü–∏—Ñ—Ä—ã, –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è).

–£—á–∏—Ç—ã–≤–∞–µ—Ç —Ä–µ–≥–∏—Å—Ç—Ä (–±–æ–ª—å—à–∏–µ –±—É–∫–≤—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–æ–ª—å—à–∏–º–∏, –º–∞–ª–µ–Ω—å–∫–∏–µ ‚Äî –º–∞–ª–µ–Ω—å–∫–∏–º–∏).

–ü—Ä–∏–º–µ—Ä—ã:

caesar_cipher("Hello, World!", 3)  ‚Üí "Khoor, Zruog!"
caesar_cipher("–ê–ë–í–ì–î", 1)         ‚Üí "–ë–í–ì–î–ï"
caesar_cipher("xyz", 2)           ‚Üí "zab"  # (–∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ –∞–ª—Ñ–∞–≤–∏—Ç–∞)
üí° –ü–æ–¥—Å–∫–∞–∑–∫–∏:
–ò—Å–ø–æ–ª—å–∑—É–π ord() (–ø–æ–ª—É—á–∏—Ç—å –∫–æ–¥ —Å–∏–º–≤–æ–ª–∞) –∏ chr() (–ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å –∫–æ–¥ –≤ —Å–∏–º–≤–æ–ª).

–î–ª—è –∞–Ω–≥–ª–∏–π—Å–∫–∏—Ö –±—É–∫–≤:

ord('A') = 65, ord('Z') = 90

ord('a') = 97, ord('z') = 122

–î–ª—è —Ä—É—Å—Å–∫–∏—Ö –±—É–∫–≤:

ord('–ê') = 1040, ord('–Ø') = 1071

ord('–∞') = 1072, ord('—è') = 1103

–ù–µ –∑–∞–±—É–¥—å –ø—Ä–æ –∑–∞—Ü–∏–∫–ª–∏–≤–∞–Ω–∏–µ (–ø–æ—Å–ª–µ '—è' –∏–¥—ë—Ç '–∞').
"""

# def cipher(cod):
#     change = {91: 65, 92: 66, 123: 97, 124: 98, 1072: 1040, 1073: 1041, 1104: 1072, 1105: 1073}
#     if cod in change.key:
#         print(change.)
#
# def ceasar_cipher(word):
#     change = {91: 65, 92: 66, 123: 97, 124: 98, 1072: 1040, 1073: 1041, 1104: 1072, 1105: 1073}
#     ord_word = list(ord(ch) + 2 for ch in word)
#     cod_word = []
#     for ch in ord_word:
#         if int(ch) in change:
#             cod_word.append(chr(change[int(ch)]))
#         else:
#             cod_word.append(chr(ch))
#     return ''.join(cod_word)
# #
#
# #
# print(ceasar_cipher("xyz", 2))

"""
Izuchaem Python. Lutz
"""

"""
üîπ –ó–∞–¥–∞–Ω–∏—è –Ω–∞ —Å—Ç—Ä–æ–∫–∏ (—Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –≤ –∫–æ–Ω—Ü–µ)
1. –û–±—Ä–∞—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
–ü—Ä–∏–º–µ—Ä:
reverse_string("–ü—Ä–∏–≤–µ—Ç") ‚Üí "—Ç–µ–≤–∏—Ä–ü"
"""

# def reverse_string(s):
#     if type(s) == str:
#         s = s[::-1]
#         print(s)
#     else:
#         print("It`s not str")
#     return s
#
#
# reverse_string("–ü—Ä–∏–≤–µ—Ç")

# def count_vowels(s):
#     vowels = "–∞–µ—ë–∏–æ—É—ã—ç—é—è–ê–ï–Å–ò–û–£–´–≠–Æ–Ø"
#     print(list(char in s for char in vowels))
#     return sum(1 for char in s if char in vowels)
#
# print(count_vowels("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ"))  # 6

"""
2. –ü–æ–¥—Å—á—ë—Ç –≥–ª–∞—Å–Ω—ã—Ö
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ (–∞, –µ, —ë, –∏, –æ, —É, —ã, —ç, —é, —è) –≤ —Å—Ç—Ä–æ–∫–µ.
–ü—Ä–∏–º–µ—Ä:
count_vowels("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ") ‚Üí 6
"""

# def count_vowels(s):
#     vowels = ('–∞', '–µ', '—ë', '–∏', '–æ', '—É', '—ã', '—ç', '—é', '—è')
#     n = 0
#     if type(s) == str:
#         for c in s:
#             print(c)
#             if c in vowels:
#                 print("+++")
#                 n += 1
#         print(n)
#     else:
#         print("It`s not str type")
#     return n
#
# def count_vowels2(s):
#     vowels = ('–∞–µ—ë–∏–æ—É—ã—ç—é—è')
#     n = 0
#     for ch in s:
#         n += vowels.count(ch)
#     print(n)
#     return n

# s = "–ü—Ä–æ–≥—Ä–∞–º–º–∏–∏–∏–∏–∏—Ä–æ–≤–∞–Ω–∏–µ"
# count_vowels(s)
# count_vowels2(s)

"""
3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º (—á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ, –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤).
–ü—Ä–∏–º–µ—Ä:
is_palindrome("–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞") ‚Üí True
"""
# def is_palidrome(s):
#     s = s.replace(" ","")
#     s = s.lower()
#     h = len(s) // 2
#     # l = len(s)
#     # if l % 2 == 0:
#     #     begin_s= s[:h]
#     #     end_s = s[h:]
#     #     print(begin_s, " ", end_s)
#     # else:
#     #     begin_s= s[:h]
#     #     end_s = s[h+1:]
#     #     print("–ß–∏—Å–ª–æ –±—É–∫–≤ –Ω–µ—á–µ—Ç–Ω–æ–µ ", begin_s, " ", end_s)
#     # print(s)
#     pali = True
#     for i in range(h):
#         pali = True * s[i] == s[-i-1]
#         # print(s[i], " == ", s[-i-1], "it`s ", pali)
#     print("Result", pali)
#     return pali
#
# is_palidrome("–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞")

"""
4. –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤
–ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ _ (–Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ).
–ü—Ä–∏–º–µ—Ä:
replace_spaces("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞") ‚Üí "–≠—Ç–æ_—Ç–µ—Å—Ç–æ–≤–∞—è_—Å—Ç—Ä–æ–∫–∞"
"""
# def replace_spaces(s):
#     s = s.replace(" ","_")
#     return s
#
# s = "–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞"
# s = replace_spaces(s)
# print(s)
"""
# 5. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–§–∞–º–∏–ª–∏—è, –ò." (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∏–º–µ–Ω–∏ + —Ç–æ—á–∫–∞).
# –ü—Ä–∏–º–µ—Ä:
# format_name("–ò–≤–∞–Ω", "–ü–µ—Ç—Ä–æ–≤") ‚Üí "–ü–µ—Ç—Ä–æ–≤, –ò."
"""
# def format_name(fname, sname):
#     return fname + ", " + sname[0] + "."
#
# print(format_name("Karchenko", "Andrey"))
"""
üìå –ó–∞–¥–∞–Ω–∏–µ: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤
–¶–µ–ª—å:
–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üîπ –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è").

–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä–µ –∏–ª–∏ —Å–ø–∏—Å–∫–µ.

–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤:

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç –æ–±—â—É—é —Å—É–º–º—É —Ç—Ä–∞—Ç.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):

–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª (—á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–ª–∏ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã).

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç—Ä–∞—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
"""  #
# from dateutil.parser import parse
#
#
# # –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–∏–ø–∞ class 'datetime.date'>
# # –ù–∞–¥–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –µ–µ –≤ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏ —á–∏—Ç–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ
# def input_date():
#     date_str = input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É: ')
#     try:
#         user_date = parse(date_str).date
#         print('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –¥–∞—Ç–∞: ', user_date())
#     except ValueError as val_er:
#         print('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É: ', val_er)
#     return user_date()
#
#
# # –§—É–Ω–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –∫–Ω–∏–≥–∏ –õ—É—Ç—Ü–∞
# def teach_str():
#     # –ü—Ä–∞–∫—Ç–∏–∫—É–µ–º —Å—Ä–µ–∑—ã
#     # N = 'Andrey'
#     # F = 'Karchenko'
#     # L = N[0:-1] + F[1:]
#     # –ü—Ä–∞–∫—Ç–∏–∫—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
#     L = '–í—ã–≤–æ–¥–∏–º —á–∏—Å–ª–∞: {2:X}, {1:-120,.5}, {0:.3}'.format(2.1231243124, 3 / 7, 255)
#
#     return L


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# date = input_date()
# print(type(date), '{}'.format(date))
#
# L = teach_str()
# print(L)
#
# #
# from pathlib import Path

#
# data = {}
# #
# lines = Path("expenses.txt").read_text(encoding="utf-8")  # .splitlines()
# # print(lines)
# s_expended = lines.split("\n")
# i = 0
# for n in s_expended:
#     data[i] = n.split(', ')
#     #    print(data[i])
#     i += 1
# data[6] = ['2012.12.12', 'cookis', '1000']
# print(data[0][2])
# print(len(data[1][1]))
# data[6] = ['2012.12.12', 'cookis', '1000']
# suma = 0
# for exp in data:
#     #   print(data[exp][2])
#     suma += int(data[exp][2])
# print(suma)
#
# "Output row matrix"
# M = [[1, 2, 3],
#      [4, 5, 6],
#      [7, 8, 9]]
# col2 = [row2[1] for row2 in M]
# print(col2)
#
# col2 = [row[1] + 1 for row in M]  # –î–æ–±–∞–≤–∏—Ç—å 1 –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≤ —Å—Ç–æ–ª–±—Ü–µ 2
# print(col2)
# col2 = [row[1] for row in M if row[1] % 2 == 0]  # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–µ—á–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
# print(col2)
#
# diag = [M[i][i] for i in [0, 1, 2]]  # –°–æ–±—Ä–∞—Ç—å –¥–∏–∞–≥–æ–Ω–∞–ª—å –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã
# print(diag)
# # [1, 5, 9]
#
# doubles = [c * 2 for c in 'spam']  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ
# print(doubles)
#
# L = list(range(4))
# print(L)
# L = list(range(-6, 7, 2))  # –æ—Ç -6 –¥–æ +6 —Å —à–∞–≥–æ–º 2
# # [-6, -4, -2, 0, 2, 4, 6]
# # 0. . 3 (–≤ Python –ó.–• —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–∑–æ–≤ list ())
# # (–≤ Python –ó.–• –Ω—É–∂–µ–Ω –≤—ã–∑–æ–≤ list())
# print(L)
#
# L = [[x ** 2, x ** 3] for x in range(4)]  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π, —Ñ–∏–ª—å—Ç—Ä—ã if
# # [[–û, 0], [1, 1], [4, 8], [9, 27]]
# L = [[x, x / 2, x * 2] for x in range(-6, 7, 2) if x > 0]
# # [[2, 1, 4], [4, 2, 8], [6, 3, 12]]
# print(L)

# print('s_expended[0] ', s_expended[1])
# print(len(s_expended))
# for line in Path("expenses.txt").read_text(encoding="utf-8").splitlines():
#     if ":" in line:
#         key, value = line.split(":", maxsplit=1)
#         data[key.strip()] = value.strip()


# from pathlib import Path
# 1=0
# lines = Path("expenses.txt").read_text(encoding="utf-8").splitlines()
# for line in lines:
#     L=
#     print(line)

# content=Path("expenses.txt").read_text(encoding="utf-8")
# print(content)
#
# l=content
# # expenses = {}
# lines = []
# with open("expenses.txt", "r", encoding="utf-8") as file:
#     n = file.readline()
#         for line in file:
#             lines=
#
# with open("file.txt", "r", encoding="utf-8") as file:
#     line = file.readline()  # –ß–∏—Ç–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
#     while line:
#         print(line.strip())  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
#         line = file.readline()

# from pathlib import Path
#
# content = Path("expenses.txt").read_text(encoding="utf-8")
# print(content)


"""
–ü–ï–†–í–´–ô –°–¢–ï–ö –†–ï–®–ï–ù–ù–´–• –ó–ê–î–ê–ß 21-23.03.2025 –≥.
"""

"""
15. –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞:
–°–æ–∑–¥–∞–π—Ç–µ –∫–ª–∞—Å—Å Car —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏ brand, model –∏ year.

–î–æ–±–∞–≤—å—Ç–µ –º–µ—Ç–æ–¥ display_info(), –∫–æ—Ç–æ—Ä—ã–π –≤—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–∞—à–∏–Ω–µ.

–°–æ–∑–¥–∞–π—Ç–µ –æ–±—ä–µ–∫—Ç —ç—Ç–æ–≥–æ –∫–ª–∞—Å—Å–∞ –∏ –≤—ã–∑–æ–≤–∏—Ç–µ –º–µ—Ç–æ–¥ display_info().
"""


# class Car:
#     def __init__(self, brand, model, year):
#         self.brand = brand
#         self.model = model
#         self.year = year
#
#     def display_info(self):
#         print(f"–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å: {self.brand}. –ú–æ–¥–µ–ª—å: {self.model}. –ì–æ–¥ –≤—ã–ø—É—Å–∫–∞: {self.year}")
#
#
# car = Car('VAZ', '2111', '2003')
# car.display_info()

"""
14. –†–∞–±–æ—Ç–∞ —Å –¥–∞—Ç–∞–º–∏:
–ò—Å–ø–æ–ª—å–∑—É—è –º–æ–¥—É–ª—å datetime, –≤—ã–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—É—â—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è.

–î–æ–±–∞–≤—å—Ç–µ –∫ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–µ 5 –¥–Ω–µ–π –∏ –≤—ã–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""
# import datetime
# from datetime import timedelta
#
# print(datetime.date.today())
# today = datetime.date.today()
# today = today + timedelta(days=5)
# print(today)


"""
13. –ò—Å–∫–ª—é—á–µ–Ω–∏—è:
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ –∏ –≤—ã–≤–æ–¥–∏—Ç –µ–≥–æ –∫–≤–∞–¥—Ä–∞—Ç.

–û–±—Ä–∞–±–æ—Ç–∞–π—Ç–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç –Ω–µ —á–∏—Å–ª–æ.

"""
# from sys import exception
#
# try:
#     n = int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –≤–æ–∑–≤–µ–¥–µ–Ω–∏—è –≤ –∫–≤–∞–¥—Ä–∞—Ç: "))
#     print("–ö–≤–∞–¥—Ä–∞—Ç —á–∏—Å–ª–∞ —Ä–∞–≤–µ–Ω: ", n**2)
# except Exception as e:
#     print("Error :", e)

"""12. –†–µ–∫—É—Ä—Å–∏—è:
–ù–∞–ø–∏—à–∏—Ç–µ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≤—ã—á–∏—Å–ª–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ—Ä–∏–∞–ª–∞ —á–∏—Å–ª–∞.
"""
# def Fac (x):
#     return x if x == 1 else Fac(x-1)*x
# print(Fac(10))

"""
–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∑–∞–¥–∞—á–∏:
11. –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:
–î–∞–Ω —Å–ø–∏—Å–æ–∫ —Å—Ç—Ä–æ–∫: ["banana", "apple", "cherry", "date"].

–û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.

–û—Ç—Å–æ—Ä—Ç–∏—Ä—É–π—Ç–µ –µ–≥–æ –ø–æ –¥–ª–∏–Ω–µ —Å—Ç—Ä–æ–∫.

"""
# fruit = ["banana", "apple", "cherry", "date"]
# print(fruit)
# fruit.sort()
# print(fruit)
# fruitsort=sorted(fruit, key=lambda x: len(x))
# print(fruitsort)


"""
10. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ lambda –∏ map():
–î–∞–Ω —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª: [1, 2, 3, 4, 5].

–ò—Å–ø–æ–ª—å–∑—É—è map() –∏ lambda, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, –≥–¥–µ –∫–∞–∂–¥–æ–µ —á–∏—Å–ª–æ —É–º–Ω–æ–∂–µ–Ω–æ –Ω–∞ 2.

–í—ã–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""
# numbers = [1, 2, 3, 4, 5]
# squared = list(map(lambda x: x ** 2, numbers))
# print(squared)

"""
9. –†–∞–±–æ—Ç–∞ —Å —Ñ–∞–π–ª–∞–º–∏:
–°–æ–∑–¥–∞–π—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª example.txt –∏ –∑–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–µ–≥–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫ —Ç–µ–∫—Å—Ç–∞.

–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è —á–∏—Ç–∞–µ—Ç —ç—Ç–æ—Ç —Ñ–∞–π–ª –∏ –≤—ã–≤–æ–¥–∏—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫ –≤ –Ω—ë–º.
"""
# df = open("exemple.txt", "r", encoding="utf-8")
#
# for l1 in df:
#
#     print(l1)
# df.close()
"""
8. –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä—ã —Å–ø–∏—Å–∫–æ–≤:
–°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª –æ—Ç 1 –¥–æ 10.

–ò—Å–ø–æ–ª—å–∑—É—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ø–∏—Å–∫–æ–≤, —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —Å–ø–∏—Å–æ–∫, —Å–æ–¥–µ—Ä–∂–∞—â–∏–π –∫–≤–∞–¥—Ä–∞—Ç—ã —ç—Ç–∏—Ö —á–∏—Å–µ–ª.

–í—ã–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""
# num = [1, 2, 3, 4]
# num = [i for i in range(0, 100, 5) if i>0]
# squares = [i*i for i in num]
#
# print(num)
# print(squares)

"""
7. –°–ª–æ–≤–∞—Ä–∏:
–°–æ–∑–¥–∞–π—Ç–µ —Å–ª–æ–≤–∞—Ä—å, –≥–¥–µ –∫–ª—é—á–∏ ‚Äî —ç—Ç–æ –∏–º–µ–Ω–∞ –ª—é–¥–µ–π, –∞ –∑–Ω–∞—á–µ–Ω–∏—è ‚Äî –∏—Ö –≤–æ–∑—Ä–∞—Å—Ç:

people = {"Alice": 25, "Bob": 30, "Charlie": 35}
–î–æ–±–∞–≤—å—Ç–µ –≤ —Å–ª–æ–≤–∞—Ä—å –Ω–æ–≤–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞: "David": 40.

–ò–∑–º–µ–Ω–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç "Alice" –Ω–∞ 26.

–£–¥–∞–ª–∏—Ç–µ "Bob" –∏–∑ —Å–ª–æ–≤–∞—Ä—è.

–í—ã–≤–µ–¥–∏—Ç–µ –∏—Ç–æ–≥–æ–≤—ã–π —Å–ª–æ–≤–∞—Ä—å.

"""
#
# people = {'Alice': 25, 'Bob': 30, 'Charie': 35}
# print(people)
# people['David'] = 40
# print(people)
# people.pop('Bob')
# print(people)
#
# d1 = {"a": 1, "b": 2, "c": 3}
# print(d1)
# d1.update(people)
# print(d1)
# #–í—ã–≤–æ–¥–∏–º –∫–ª—é—á–∏
# for key in d1:
#     print(key)
# #–í—ã–≤–æ–¥–∏–º –∑–Ω–∞—á–µ–Ω–∏—è
# for value in d1.values():
#     print(value)
# #–í—ã–≤–æ–¥–∏–º –≤–µ—Å—å —Å–ª–æ–≤–∞—Ä—å
# for key, value in d1.items():
#     print(f"{key}: {value}")


"""
6. –†–∞–±–æ—Ç–∞ —Å –º–Ω–æ–∂–µ—Å—Ç–≤–∞–º–∏:
–î–∞–Ω—ã –¥–≤–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–∞:


set1 = {1, 2, 3, 4, 5}
set2 = {4, 5, 6, 7, 8}
–ù–∞–π–¥–∏—Ç–µ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ —ç—Ç–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤.

–ù–∞–π–¥–∏—Ç–µ –æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ —ç—Ç–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤.

–ù–∞–π–¥–∏—Ç–µ —Ä–∞–∑–Ω–æ—Å—Ç—å set1 –∏ set2.
"""
# set1 = {1, 2, 3, 4, 5}
# set2 = {4, 5, 6, 7, 8}
# print(set1)
# if set1 == set2:
#     print("equ")
# else:
#     print("not")
# print("–ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏–µ ",set1 & set2)
# print('–æ–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ ', set1|set2)
# print("—Ä–∞–∑–Ω–æ—Å—Ç—å ", set1^set2)#, set2-set1)
"""
5. –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ zip():

–î–∞–Ω—ã –¥–≤–∞ —Å–ø–∏—Å–∫–∞:
names = ["Alice", "Bob", "Charlie"]
ages = [25, 30, 35]

–û–±—ä–µ–¥–∏–Ω–∏—Ç–µ –∏—Ö —Å –ø–æ–º–æ—â—å—é zip().
–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π.
–í—ã–≤–µ–¥–∏—Ç–µ –∏–º—è –∏ –≤–æ–∑—Ä–∞—Å—Ç –∫–∞–∂–¥–æ–≥–æ —á–µ–ª–æ–≤–µ–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: "Alice is 25 years old.".
# """
# names = ["Alice", "Bob", "Charlie"]
# ages = [25, 30, 35]
# people = zip(names, ages)
# people_list = list(zip(*people))
#
# print(people_list)
# for name, age in zip(names, ages): #people_list:
#     print(f"{name} is {age} years old")
# i = 0
#
# while i <= len(people_list):
#     print(f"{people_list[0][i]} {people_list[1][i]} years old")
#     i+=1
# #
# # names = ["Alice", "Bob", "Charlie"]
# # ages = [25, 30, 35]
# #
# # for name, age in zip(names, ages):
# #     print(f"{name} is {age} years old.")
# #
"""
4. –û–ø–µ—Ä–∞—Ç–æ—Ä—ã –∏ —É—Å–ª–æ–≤–∏—è:
–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —á–∏—Å–ª–æ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç:

–ï—Å–ª–∏ —á–∏—Å–ª–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ, –≤—ã–≤–µ–¥–∏—Ç–µ "Positive".

–ï—Å–ª–∏ —á–∏—Å–ª–æ –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ, –≤—ã–≤–µ–¥–∏—Ç–µ "Negative".

–ï—Å–ª–∏ —á–∏—Å–ª–æ —Ä–∞–≤–Ω–æ –Ω—É–ª—é, –≤—ã–≤–µ–¥–∏—Ç–µ "Zero".

"""
# n=int(input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ: "))
# if n == 0:
#     print('Zero')
# elif n < 0:
#     print("Negativ")
# else:
#     print("Positive")


"""
3. –§—É–Ω–∫—Ü–∏–∏:
–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é multiply(a, b), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ –¥–≤—É—Ö —á–∏—Å–µ–ª.

–ù–∞–ø–∏—à–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é is_even(n), –∫–æ—Ç–æ—Ä–∞—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ —á–∏—Å–ª–æ —á—ë—Ç–Ω–æ–µ, –∏ False ‚Äî –µ—Å–ª–∏ –Ω–µ—á—ë—Ç–Ω–æ–µ.

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –≤ –ø—Ä–æ–≥—Ä–∞–º–º–µ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ö —Ä–∞–±–æ—Ç—É.

"""
# def multiply(a, b):
#     return a * b
# print(multiply(2,2))
# def is_even(n):
#     return False if n % 2 else True
# n = input("–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –µ–≥–æ —á–µ—Ç–Ω–æ—Å—Ç–∏: ")
# print("–ß–µ—Ç–Ω–æ–µ") if is_even(int(n)) else print('–ù–µ—á–µ—Ç–Ω–æ–µ')


"""
2. –†–∞–±–æ—Ç–∞ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏:
–î–∞–Ω–∞ —Å—Ç—Ä–æ–∫–∞: "Python is awesome!".

–ü—Ä–µ–æ–±—Ä–∞–∑—É–π—Ç–µ —Å—Ç—Ä–æ–∫—É –≤ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤.

–î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤–æ "right?".

–û–±—ä–µ–¥–∏–Ω–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –æ–±—Ä–∞—Ç–Ω–æ –≤ —Å—Ç—Ä–æ–∫—É —Å –ø—Ä–æ–±–µ–ª–∞–º–∏ –º–µ–∂–¥—É —Å–ª–æ–≤–∞–º–∏.

–í—ã–≤–µ–¥–∏—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
"""
# string = 'Python is awesome!'
# str_as_list = string.split()
# print(str_as_list)
# str_as_list.append('right?')
# print(str_as_list)
# new_string = ' '.join(str_as_list)
# print(new_string)
#

"""
1. –†–∞–±–æ—Ç–∞ —Å–æ —Å–ø–∏—Å–∫–∞–º–∏:
–°–æ–∑–¥–∞–π—Ç–µ —Å–ø–∏—Å–æ–∫ –∏–∑ 10 —á–∏—Å–µ–ª.

–î–æ–±–∞–≤—å—Ç–µ –≤ –∫–æ–Ω–µ—Ü —Å–ø–∏—Å–∫–∞ —á–∏—Å–ª–æ 11.

–£–¥–∞–ª–∏—Ç–µ –≤—Ç–æ—Ä–æ–π —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞.

–ù–∞–π–¥–∏—Ç–µ —Å—É–º–º—É –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ —Å–ø–∏—Å–∫–∞.

–í—ã–≤–µ–¥–∏—Ç–µ —Å–ø–∏—Å–æ–∫ –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
"""
# list = [1, 2, 3, 4, 5, 6, 7]
# list.append(11)
# list.pop(1)
# # sum=0
# # for elem in list:
# #     print(elem)
# #     sum+=int(elem)
# i=0
# sum=0
# while i < len(list):
#     # print(list[i])
#     sum+=list[i]
#     i+=1
#     print(list[len(list) - i])
#
# print(sum)
# list=list[::-1]
# list.reverse()
#
# print(list)
# #sum=summ(list)
