"""
Izuchaem Python. Lutz
"""


# üîπ –ó–∞–¥–∞–Ω–∏—è –Ω–∞ —Å—Ç—Ä–æ–∫–∏ (—Å —Ä–µ—à–µ–Ω–∏—è–º–∏ –≤ –∫–æ–Ω—Ü–µ)
# 1. –û–±—Ä–∞—â–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫–∏
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ—ë –≤ –æ–±—Ä–∞—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ.
# –ü—Ä–∏–º–µ—Ä:
# reverse_string("–ü—Ä–∏–≤–µ—Ç") ‚Üí "—Ç–µ–≤–∏—Ä–ü"

def reverse_string(s):
    if type(s) == str:
        s = s[::-1]
        print(s)
    else:
        print("It`s not str")
    return s


reverse_string("–ü—Ä–∏–≤–µ—Ç")

# 2. –ü–æ–¥—Å—á—ë—Ç –≥–ª–∞—Å–Ω—ã—Ö
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è —Å—á–∏—Ç–∞–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≥–ª–∞—Å–Ω—ã—Ö –±—É–∫–≤ (–∞, –µ, —ë, –∏, –æ, —É, —ã, —ç, —é, —è) –≤ —Å—Ç—Ä–æ–∫–µ.
# –ü—Ä–∏–º–µ—Ä:
# count_vowels("–ü—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ") ‚Üí 6
def count_vowels(s):
    vowels = ('–∞', '–µ', '—ë', '–∏', '–æ', '—É', '—ã', '—ç', '—é', '—è')
    n = 0
    if type(s) == str:
        for c in s:
            print(c)
            if c in vowels:
                print("+++")
                n += 1
        print(n)
    else:
        print("It`s not str type")
    return n
count_vowels("–∏–ª–∏")
# 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –ø–∞–ª–∏–Ω–¥—Ä–æ–º–æ–º (—á–∏—Ç–∞–µ—Ç—Å—è –æ–¥–∏–Ω–∞–∫–æ–≤–æ —Å–ª–µ–≤–∞ –Ω–∞–ø—Ä–∞–≤–æ –∏ —Å–ø—Ä–∞–≤–∞ –Ω–∞–ª–µ–≤–æ, –±–µ–∑ —É—á—ë—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞ –∏ –ø—Ä–æ–±–µ–ª–æ–≤).
# –ü—Ä–∏–º–µ—Ä:
#
# python
# Copy
# is_palindrome("–ê —Ä–æ–∑–∞ —É–ø–∞–ª–∞ –Ω–∞ –ª–∞–ø—É –ê–∑–æ—Ä–∞") ‚Üí True
# 4. –ó–∞–º–µ–Ω–∞ —Å–∏–º–≤–æ–ª–æ–≤
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–º–µ–Ω—è–µ—Ç –≤—Å–µ –ø—Ä–æ–±–µ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ –Ω–∞ _ (–Ω–∏–∂–Ω–µ–µ –ø–æ–¥—á—ë—Ä–∫–∏–≤–∞–Ω–∏–µ).
# –ü—Ä–∏–º–µ—Ä:
#
# python
# Copy
# replace_spaces("–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞") ‚Üí "–≠—Ç–æ_—Ç–µ—Å—Ç–æ–≤–∞—è_—Å—Ç—Ä–æ–∫–∞"
# 5. –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–º–µ–Ω–∏
# –ù–∞–ø–∏—à–∏ —Ñ—É–Ω–∫—Ü–∏—é, –∫–æ—Ç–æ—Ä–∞—è –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—é, –∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç—Ä–æ–∫—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ "–§–∞–º–∏–ª–∏—è, –ò." (–ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∏–º–µ–Ω–∏ + —Ç–æ—á–∫–∞).
# –ü—Ä–∏–º–µ—Ä:
#
# python
# Copy
# format_name("–ò–≤–∞–Ω", "–ü–µ—Ç—Ä–æ–≤") ‚Üí "–ü–µ—Ç—Ä–æ–≤, –ò."



"""
üìå –ó–∞–¥–∞–Ω–∏–µ: –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ä–∞—Å—Ö–æ–¥–æ–≤
–¶–µ–ª—å:
–ù–∞–ø–∏—Å–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ —Ç—Ä–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

üîπ –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å:
–í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö:

–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∏—Ç —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞ –∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ï–¥–∞", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è").

–î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ —Å–ª–æ–≤–∞—Ä–µ –∏–ª–∏ —Å–ø–∏—Å–∫–µ.

–ê–Ω–∞–ª–∏–∑ —Ä–∞—Å—Ö–æ–¥–æ–≤:

–ü—Ä–æ–≥—Ä–∞–º–º–∞ –≤—ã–≤–æ–¥–∏—Ç –æ–±—â—É—é —Å—É–º–º—É —Ç—Ä–∞—Ç.

–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç, —Å–∫–æ–ª—å–∫–æ –ø–æ—Ç—Ä–∞—á–µ–Ω–æ –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.

–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ (–ø–æ –∂–µ–ª–∞–Ω–∏—é):

–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª (—á—Ç–æ–±—ã –æ–Ω–∏ –Ω–µ –ø—Ä–æ–ø–∞–¥–∞–ª–∏ –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–æ–≥—Ä–∞–º–º—ã).

–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –≤—Å–µ—Ö —Ç—Ä–∞—Ç –∑–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å.
"""

from dateutil.parser import parse


# –§—É–Ω–∫—Ü–∏—è –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –¥–∞—Ç—É –≤–≤–µ–¥–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º —Ç–∏–ø–∞ class 'datetime.date'>
# –ù–∞–¥–æ –ø—Ä–∏–¥—É–º–∞—Ç—å –∫–∞–∫ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –µ–µ –≤ —Å—Ç—Ä–æ–∫—É –∏–ª–∏ –∑–∞–ø–∏—Å—ã–≤–∞—Ç—å –∏ —á–∏—Ç–∞—Ç—å –∏–∑ —Ñ–∞–π–ª–∞ –≤ —Ç–∞–∫–æ–º –≤–∏–¥–µ
def input_date():
    date_str = input('–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É: ')
    try:
        user_date = parse(date_str).date
        print('–†–∞—Å–ø–æ–∑–Ω–∞–Ω–∞ –¥–∞—Ç–∞: ', user_date())
    except ValueError as val_er:
        print('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –¥–∞—Ç—É: ', val_er)
    return user_date()


# –§—É–Ω–∫—Ü–∏–∏ –ø–æ —Ä–∞–±–æ—Ç–µ —Å–æ —Å—Ç—Ä–æ–∫–∞–º–∏ –¥–ª—è –∑–∞–∫—Ä–µ–ø–ª–µ–Ω–∏—è –∑–Ω–∞–Ω–∏–π –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –∏–∑ –∫–Ω–∏–≥–∏ –õ—É—Ç—Ü–∞
def teach_str():
    # –ü—Ä–∞–∫—Ç–∏–∫—É–µ–º —Å—Ä–µ–∑—ã
    # N = 'Andrey'
    # F = 'Karchenko'
    # L = N[0:-1] + F[1:]
    # –ü—Ä–∞–∫—Ç–∏–∫—É–µ–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –≤—ã–≤–æ–¥
    L = '–í—ã–≤–æ–¥–∏–º —á–∏—Å–ª–∞: {2:X}, {1:-120,.5}, {0:.3}'.format(2.1231243124, 3 / 7, 255)

    return L


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞—Ç—ã –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# date = input_date()
# print(type(date), '{}'.format(date))
#
L = teach_str()
print(L)

#
# from pathlib import Path

#
# data = {}
# #
# lines = Path("expenses.txt").read_text(encoding="utf-8")  # .splitlines()
# # print(lines)
# s_expended = lines.split("\n")
# i = 0
# for n in s_expended:
#     data[i] = n.split(', ')
#     #    print(data[i])
#     i += 1
# data[6] = ['2012.12.12', 'cookis', '1000']
# print(data[0][2])
# print(len(data[1][1]))
# data[6] = ['2012.12.12', 'cookis', '1000']
# suma = 0
# for exp in data:
#     #   print(data[exp][2])
#     suma += int(data[exp][2])
# print(suma)
#
# "Output row matrix"
# M = [[1, 2, 3],
#      [4, 5, 6],
#      [7, 8, 9]]
# col2 = [row2[1] for row2 in M]
# print(col2)
#
# col2 = [row[1] + 1 for row in M]  # –î–æ–±–∞–≤–∏—Ç—å 1 –∫ –∫–∞–∂–¥–æ–º—É —ç–ª–µ–º–µ–Ω—Ç—É –≤ —Å—Ç–æ–ª–±—Ü–µ 2
# print(col2)
# col2 = [row[1] for row in M if row[1] % 2 == 0]  # –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –Ω–µ—á–µ—Ç–Ω—ã–µ —ç–ª–µ–º–µ–Ω—Ç—ã
# print(col2)
#
# diag = [M[i][i] for i in [0, 1, 2]]  # –°–æ–±—Ä–∞—Ç—å –¥–∏–∞–≥–æ–Ω–∞–ª—å –∏–∑ –º–∞—Ç—Ä–∏—Ü—ã
# print(diag)
# # [1, 5, 9]
#
# doubles = [c * 2 for c in 'spam']  # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å —Å–∏–º–≤–æ–ª—ã –≤ —Å—Ç—Ä–æ–∫–µ
# print(doubles)
#
# L = list(range(4))
# print(L)
# L = list(range(-6, 7, 2))  # –æ—Ç -6 –¥–æ +6 —Å —à–∞–≥–æ–º 2
# # [-6, -4, -2, 0, 2, 4, 6]
# # 0. . 3 (–≤ Python –ó.–• —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–∑–æ–≤ list ())
# # (–≤ Python –ó.–• –Ω—É–∂–µ–Ω –≤—ã–∑–æ–≤ list())
# print(L)
#
# L = [[x ** 2, x ** 3] for x in range(4)]  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–Ω–∞—á–µ–Ω–∏–π, —Ñ–∏–ª—å—Ç—Ä—ã if
# # [[–û, 0], [1, 1], [4, 8], [9, 27]]
# L = [[x, x / 2, x * 2] for x in range(-6, 7, 2) if x > 0]
# # [[2, 1, 4], [4, 2, 8], [6, 3, 12]]
# print(L)

# print('s_expended[0] ', s_expended[1])
# print(len(s_expended))
# for line in Path("expenses.txt").read_text(encoding="utf-8").splitlines():
#     if ":" in line:
#         key, value = line.split(":", maxsplit=1)
#         data[key.strip()] = value.strip()


# from pathlib import Path
# 1=0
# lines = Path("expenses.txt").read_text(encoding="utf-8").splitlines()
# for line in lines:
#     L=
#     print(line)

# content=Path("expenses.txt").read_text(encoding="utf-8")
# print(content)
#
# l=content
# # expenses = {}
# lines = []
# with open("expenses.txt", "r", encoding="utf-8") as file:
#     n = file.readline()
#         for line in file:
#             lines=
#
# with open("file.txt", "r", encoding="utf-8") as file:
#     line = file.readline()  # –ß–∏—Ç–∞–µ—Ç –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É
#     while line:
#         print(line.strip())  # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã
#         line = file.readline()

# from pathlib import Path
#
# content = Path("expenses.txt").read_text(encoding="utf-8")
# print(content)
